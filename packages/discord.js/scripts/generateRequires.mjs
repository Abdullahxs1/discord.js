import { readdir, writeFile } from 'node:fs/promises';

async function writeWebsocketHandlerImports() {
  const lines = ["'use strict';\n", 'const handlers = Object.fromEntries(['];

  const handlersDirectory = new URL('../src/client/websocket/handlers', import.meta.url);

  for (const file of await (await readdir(handlersDirectory)).sort()) {
    if (file === 'index.js') continue;

    lines.push(`  ['${file.slice(0, -3)}', require('./${file.slice(0, -3)}')],`);
  }

  lines.push(']);\n\nmodule.exports = handlers;\n');

  const outputFile = new URL('../src/client/websocket/handlers/index.js', import.meta.url);

  await writeFile(outputFile, lines.join('\n'));
}

async function writeClientActionImports() {
  const lines = [
    "'use strict';\n",
    `/**
 * @import Client from '../Client';
 */
`,
    'class ActionsManager {',
    '  // These symbols represent fully built data that we inject at times when calling actions manually.',
    '  // Action#getUser, for example, will return the injected data (which is assumed to be a built structure)',
    '  // instead of trying to make it from provided data',
    "  injectedUser = Symbol('djs.actions.injectedUser');",
    "  injectedChannel = Symbol('djs.actions.injectedChannel');",
    "  injectedMessage = Symbol('djs.actions.injectedMessage');",
    '',
    `  /**
   * @param {Client} client The client
   * @internal
   * @hideconstructor
   */`,
    '  constructor(client) {',
    '    this.client = client;',
    '',
  ];

  const dtsLines = [
    `import Action from './Action';
import Client from '../Client';
import { Guild } from '../../structures/Guild';
import { BaseChannel } from '../../structures/BaseChannel';
import WebSocketShard from '../websocket/WebSocketShard';
import { Message } from '../../structures/Message';

declare class ActionsManager {
  injectedUser: symbol;
  injectedChannel: symbol;
  injectedMessage: symbol;
  client: Client;

  constructor(client: Client);

  register(action: typeof Action): void;

  // Autogenerated start`,
  ];

  const actionsDirectory = new URL('../src/client/actions', import.meta.url);
  for (const file of (await readdir(actionsDirectory)).sort()) {
    if (file === 'Action.js' || file === 'ActionsManager.js' || file === 'ActionsManager.d.ts') continue;

    const fileName = file.slice(0, -3);

    lines.push(`    this.register(require('./${fileName}'));`);

    // d.ts uniqueness
    switch (fileName) {
      case 'GuildChannelsPositionUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[{ guild_id: string; channels: { id: string; position: number }[] }], { guild: Guild }>;`,
        );
        break;
      }
      case 'GuildRolesPositionUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[{ guild_id: string; roles: { id: string; position: number }[] }], { guild: Guild }>;`,
        );
        break;
      }
      case 'GuildEmojiCreate': {
        dtsLines.push(`  ${fileName}: Action<[guild: Guild, emoji: import('discord-api-types/v10').APIEmoji]>;`);
        break;
      }
      case 'GuildEmojiDelete': {
        dtsLines.push(`  ${fileName}: Action<[emoji: import('discord-api-types/v10').APIEmoji]>;`);
        break;
      }
      case 'GuildEmojiUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[oldEmoji: import('discord-api-types/v10').APIEmoji, newEmoji: import('discord-api-types/v10').APIEmoji]>;`,
        );
        break;
      }
      case 'GuildStickerCreate': {
        dtsLines.push(
          `  ${fileName}: Action<[guild: Guild, sticker: import('discord-api-types/v10').APISticker], { sticker: import('discord-api-types/v10').APISticker }>;`,
        );

        break;
      }
      case 'GuildStickerDelete': {
        dtsLines.push(`  ${fileName}: Action<[sticker: import('discord-api-types/v10').APISticker]>;`);
        break;
      }
      case 'GuildStickerUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[oldSticker: import('discord-api-types/v10').APISticker, newSticker: import('discord-api-types/v10').APISticker]>;`,
        );
        break;
      }
      case 'MessagePollVoteAdd':
      case 'MessagePollVoteRemove': {
        // TODO(vladfrangu): fix the missing type aliases in discord-api-types (GatewayMessagePollVoteAddDispatchData/GatewayMessagePollVoteRemoveDispatchData)
        dtsLines.push(`  ${fileName}: Action<[import('discord-api-types/v10').GatewayMessagePollVoteDispatchData]>;`);
        break;
      }
      case 'ChannelCreate': {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').GatewayChannelCreateDispatchData], { channel?: BaseChannel | null }>;`,
        );
        break;
      }
      case 'ChannelUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').GatewayChannelUpdateDispatchData], { old?: BaseChannel | null; updated?: BaseChannel; }>;`,
        );
        break;
      }
      case 'GuildMemberRemove': {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').GatewayGuildMemberRemoveDispatchData, WebSocketShard]>;`,
        );
        break;
      }
      case 'GuildMemberUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').GatewayGuildMemberUpdateDispatchData, WebSocketShard]>;`,
        );
        break;
      }
      case 'MessageUpdate': {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').GatewayMessageUpdateDispatchData], { old?: Message; updated?: Message; }>;`,
        );
        break;
      }
      default: {
        dtsLines.push(
          `  ${fileName}: Action<[import('discord-api-types/v10').Gateway${file.slice(0, -3)}DispatchData]>;`,
        );
        break;
      }
    }
  }

  lines.push('  }', '');
  lines.push('  register(Action) {');
  lines.push("    this[Action.name.replace(/Action$/, '')] = new Action(this.client);");
  lines.push('  }');
  lines.push('}', '');
  lines.push('module.exports = ActionsManager;', '');

  dtsLines.push(`  // Autogenerated end
}

export = ActionsManager;
`);

  const outputFile = new URL('../src/client/actions/ActionsManager.js', import.meta.url);
  const outputDtsFile = new URL('../src/client/actions/ActionsManager.d.ts', import.meta.url);

  await writeFile(outputFile, lines.join('\n'));
  await writeFile(outputDtsFile, dtsLines.join('\n'));
}

writeWebsocketHandlerImports();
writeClientActionImports();
